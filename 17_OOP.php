<?php

/*
 * OOP in PHP
 * - contains classes and objects, methods and properties
 * - same with Java but uses arrow to access functions rather than dot method in Java
 * - Both in Java and PHP, allows constructor overloading within the same class
 * and constructor overriding for their child classes.
 */

class User {

    // Properties declared here are attributes that belongs to a class
    /*
     * Access modifiers
     * - public: can be accessed from anywhere
     * - private: can only be accessed from within the class
     * - protected: can only be accessed from within the class and its subclasses
     * (inherited classes - child classes)
     *
     * It is suggested to use private access modifier for security purposes
     */
    private mixed $name; // mixed means it can be any data type
    // not really ideal since it can be a security risk
    // In Java, it is not allowed to declare a variable without a data type
    private mixed $email;
    private mixed $password;

    /*
     * Constructor
     * - is a special method that is automatically called when an object is created
     * - is used to initialize the properties of a class
     * - is used to perform any action that needs to be done when an object is created
     */

    // Generated by PhpStorm

    // Parametrized constructor
    public function __construct($name, $email, $password)
    {
        $this->name = $name;
        $this->email = $email;
        $this->password = $password;
    }

    // Default constructor in PHP does not need to be declared

    /*
     * Methods
     * - are functions that belongs to a class
     *
     * Difference between getters and setters to normal methods
     * - Getters and setters are used to access and modify the properties of a class
     * - Normal methods are used to perform a specific task
     */

    /**
     * @param mixed $name
     */
    public function setName(mixed $name): void
    {
        $this->name = $name; // this refers to the current object which is the instance of the class
    }

    /**
     * @param mixed $email
     */
    public function setEmail(mixed $email): void
    {
        $this->email = $email;
    }

    /**
     * @param mixed $password
     */
    public function setPassword(mixed $password): void
    {
        $this->password = $password;
    }

    /**
     * @return mixed
     */
    public function getName(): mixed
    {
        return $this->name;
    }

    /**
     * @return mixed
     */
    public function getEmail(): mixed
    {
        return $this->email;
    }

    /**
     * @return mixed
     */
    public function getPassword(): mixed
    {
        return $this->password;
    }


}

// Instantiation
$user1 = new User('Emerald', 'emerald@tech.com', 'emerald0901');
echo $user1->getName(); // Emerald;
echo '<br>';
echo $user1->getEmail(); // emerald@tech.com
echo '<br>';
echo $user1->getPassword(); // emerald0901


// Inheritance
// - is a mechanism in which one object acquires all the properties and behaviors of a parent object
class Employee extends User {
    private mixed $title;

    // Constructor overloading is allowed in PHP
    public function __construct($name, $email, $password, $title)
    {
        parent::__construct($name, $email, $password);
        /*
         * In Java,
         * super(name, email, password);
         *
         * super = parent
         */
        $this->title = $title;
    }

    public function getTitle(): mixed
    {
        return $this->title;
    }
}

$user1 = new Employee('Eisblume', 'eisblume@tech.com', 'eisBlume0901', 'Manager');
echo $user1->getName(); // Eisblume
echo '<br>';
echo $user1->getEmail(); // eisblume@tech.com
echo '<br>';
echo $user1->getPassword(); // eisBlume0901
echo '<br>';
echo $user1->gettitle(); // Manager
